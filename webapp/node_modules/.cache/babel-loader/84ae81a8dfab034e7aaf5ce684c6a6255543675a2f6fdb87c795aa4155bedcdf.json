{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\GitHub\\\\test_unipos_project\\\\webapp\\\\src\\\\pages\\\\widgets\\\\PostsWidget.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setPosts } from \"state\";\nimport PostWidget from \"./PostWidget\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostsWidget = _ref => {\n  _s();\n  let {\n    userId,\n    isProfile = false\n  } = _ref;\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts);\n  const token = useSelector(state => state.token);\n\n  // const getPosts = async () => {\n  //   const response = await fetch(\"http://localhost:3001/posts\", {\n  //     method: \"GET\",\n  //     headers: { Authorization: `Bearer ${token}` },\n  //   });\n  //   const data = await response.json();\n  //   dispatch(setPosts({ posts: data }));\n  // };\n\n  // const getUserPosts = async () => {\n  //   const response = await fetch(\n  //     `http://localhost:3001/posts/${userId}/posts`,\n  //     {\n  //       method: \"GET\",\n  //       headers: { Authorization: `Bearer ${token}` },\n  //     }\n  //   );\n  //   const data = await response.json();\n  //   dispatch(setPosts({ posts: data }));\n  // };\n\n  // useEffect(() => {\n  //   if (isProfile) {\n  //     getUserPosts();\n  //   } else {\n  //     getPosts();\n  //   }\n  // }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: posts.map(_ref2 => {\n      let {\n        _id,\n        userId,\n        firstName,\n        lastName,\n        description,\n        location,\n        picturePath,\n        userPicturePath,\n        likes,\n        comments\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(PostWidget, {\n        postId: _id,\n        postUserId: userId,\n        name: `${firstName} ${lastName}`,\n        description: description,\n        location: location,\n        picturePath: picturePath,\n        userPicturePath: userPicturePath,\n        likes: likes,\n        comments: comments\n      }, _id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false);\n};\n_s(PostsWidget, \"WzTDOHoTq0V0BQy0CplP7x0NDDc=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = PostsWidget;\nexport default PostsWidget;\nvar _c;\n$RefreshReg$(_c, \"PostsWidget\");","map":{"version":3,"names":["useEffect","useDispatch","useSelector","setPosts","PostWidget","PostsWidget","userId","isProfile","dispatch","posts","state","token","map","_id","firstName","lastName","description","location","picturePath","userPicturePath","likes","comments"],"sources":["C:/Users/Admin/Documents/GitHub/test_unipos_project/webapp/src/pages/widgets/PostsWidget.jsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setPosts } from \"state\";\nimport PostWidget from \"./PostWidget\";\n\nconst PostsWidget = ({ userId, isProfile = false }) => {\n  const dispatch = useDispatch();\n  const posts = useSelector((state) => state.posts);\n  const token = useSelector((state) => state.token);\n\n  // const getPosts = async () => {\n  //   const response = await fetch(\"http://localhost:3001/posts\", {\n  //     method: \"GET\",\n  //     headers: { Authorization: `Bearer ${token}` },\n  //   });\n  //   const data = await response.json();\n  //   dispatch(setPosts({ posts: data }));\n  // };\n\n  // const getUserPosts = async () => {\n  //   const response = await fetch(\n  //     `http://localhost:3001/posts/${userId}/posts`,\n  //     {\n  //       method: \"GET\",\n  //       headers: { Authorization: `Bearer ${token}` },\n  //     }\n  //   );\n  //   const data = await response.json();\n  //   dispatch(setPosts({ posts: data }));\n  // };\n\n  // useEffect(() => {\n  //   if (isProfile) {\n  //     getUserPosts();\n  //   } else {\n  //     getPosts();\n  //   }\n  // }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      {posts.map(\n        ({\n          _id,\n          userId,\n          firstName,\n          lastName,\n          description,\n          location,\n          picturePath,\n          userPicturePath,\n          likes,\n          comments,\n        }) => (\n          <PostWidget\n            key={_id}\n            postId={_id}\n            postUserId={userId}\n            name={`${firstName} ${lastName}`}\n            description={description}\n            location={location}\n            picturePath={picturePath}\n            userPicturePath={userPicturePath}\n            likes={likes}\n            comments={comments}\n          />\n        )\n      )}\n    </>\n  );\n};\n\nexport default PostsWidget;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,cAAc;AAAC;AAAA;AAEtC,MAAMC,WAAW,GAAG,QAAmC;EAAA;EAAA,IAAlC;IAAEC,MAAM;IAAEC,SAAS,GAAG;EAAM,CAAC;EAChD,MAAMC,QAAQ,GAAGP,WAAW,EAAE;EAC9B,MAAMQ,KAAK,GAAGP,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACD,KAAK,CAAC;EACjD,MAAME,KAAK,GAAGT,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACC,KAAK,CAAC;;EAEjD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACE;IAAA,UACGF,KAAK,CAACG,GAAG,CACR;MAAA,IAAC;QACCC,GAAG;QACHP,MAAM;QACNQ,SAAS;QACTC,QAAQ;QACRC,WAAW;QACXC,QAAQ;QACRC,WAAW;QACXC,eAAe;QACfC,KAAK;QACLC;MACF,CAAC;MAAA,oBACC,QAAC,UAAU;QAET,MAAM,EAAER,GAAI;QACZ,UAAU,EAAEP,MAAO;QACnB,IAAI,EAAG,GAAEQ,SAAU,IAAGC,QAAS,EAAE;QACjC,WAAW,EAAEC,WAAY;QACzB,QAAQ,EAAEC,QAAS;QACnB,WAAW,EAAEC,WAAY;QACzB,eAAe,EAAEC,eAAgB;QACjC,KAAK,EAAEC,KAAM;QACb,QAAQ,EAAEC;MAAS,GATdR,GAAG;QAAA;QAAA;QAAA;MAAA,QAUR;IAAA,CACH;EACF,iBACA;AAEP,CAAC;AAAC,GAjEIR,WAAW;EAAA,QACEJ,WAAW,EACdC,WAAW,EACXA,WAAW;AAAA;AAAA,KAHrBG,WAAW;AAmEjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}