'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = connect;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _deepmerge = require('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _Provider = require('./Provider');

var _shallowEqual = require('../utils/shallowEqual');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ProviderLens = function ProviderLens(_ref) {
  var stateLens = _ref.stateLens,
      actionsLens = _ref.actionsLens,
      children = _ref.children;
  return _react2.default.createElement(
    _Provider.StoreContext.Consumer,
    null,
    function (storeData) {
      var dataToMerge = {};
      if (stateLens) {
        dataToMerge.state = stateLens;
      }
      if (actionsLens) {
        dataToMerge.actions = actionsLens;
      }

      var mergedStoreData = (0, _deepmerge2.default)(storeData, dataToMerge, { clone: false });

      return _react2.default.createElement(
        _Provider.StoreContext.Provider,
        { value: mergedStoreData },
        children
      );
    }
  );
};

function connect(mapStateLensToProps, mapActionsLensToProps, mergeProps) {
  if (!mapStateLensToProps) {
    mapStateLensToProps = function mapStateLensToProps() {
      return {};
    };
  }

  if (!mapActionsLensToProps) {
    mapActionsLensToProps = function mapActionsLensToProps() {
      return {};
    };
  }

  if (!mergeProps) {
    mergeProps = defaultMergeProps;
  }

  return function (WrappedComponent) {
    var ConnectedComponent = function (_React$Component) {
      _inherits(ConnectedComponent, _React$Component);

      function ConnectedComponent(props) {
        _classCallCheck(this, ConnectedComponent);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.reduxContext = { ProviderLens: ProviderLens };
        _this.state = {};
        return _this;
      }

      ConnectedComponent.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {
        var rest = nextProps.props;
        var storeData = nextProps.storeData;

        return {
          propsToPass: defaultMergeProps(mapStateLensToProps(storeData.state, rest), mapActionsLensToProps(storeData.actions, rest), rest)
        };
      };

      ConnectedComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(_, _ref2) {
        var propsToPass = _ref2.propsToPass;

        return !(0, _shallowEqual2.default)(propsToPass, this.state.propsToPass);
      };

      ConnectedComponent.prototype.render = function render() {
        return _react2.default.createElement(WrappedComponent, _extends({
          reduxContext: this.reduxContext
        }, this.state.propsToPass, {
          ref: this.props.forwardedRef
        }));
      };

      return ConnectedComponent;
    }(_react2.default.Component);

    ConnectedComponent.displayName = 'Connect(' + (WrappedComponent.displayName || WrappedComponent.name || 'Anonymous') + ')';

    return _react2.default.forwardRef(function (props, ref) {
      return _react2.default.createElement(
        _Provider.StoreContext.Consumer,
        null,
        function (storeData) {
          return _react2.default.createElement(ConnectedComponent, {
            props: props,
            storeData: storeData,
            forwardedRef: ref
          });
        }
      );
    });
  };
}

var defaultMergeProps = function defaultMergeProps(mappedState, mappedActions, ownProps) {
  return _extends({}, mappedState, mappedActions, ownProps);
};