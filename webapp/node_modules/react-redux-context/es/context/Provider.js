function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
import { bindActionCreators } from 'redux';

export var StoreContext = React.createContext();

var Provider = function (_React$Component) {
  _inherits(Provider, _React$Component);

  function Provider(props) {
    _classCallCheck(this, Provider);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this._unsubscribe = null;

    _this._getState = _this._getState.bind(_this);
    _this.state = _this._getState();

    _this._actions = bindActionCreators(_this.props.actions, _this.props.store.dispatch);
    _this._dispatch = _this.props.store.dispatch;
    return _this;
  }

  Provider.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    this._unsubscribe = this.props.store.subscribe(function () {
      _this2.setState(function () {
        return _this2._getState();
      });
    });
  };

  Provider.prototype.componentWillUnmount = function componentWillUnmount() {
    this._unsubscribe && this._unsubscribe();
  };

  Provider.prototype.render = function render() {
    var storeData = {
      state: this.state.current,
      actions: this._actions,
      dispatch: this._dispatch
    };

    return React.createElement(
      StoreContext.Provider,
      { value: storeData },
      this.props.children
    );
  };

  Provider.prototype._getState = function _getState() {
    return {
      current: this.props.store.getState()
    };
  };

  return Provider;
}(React.Component);

export { Provider as default };


Provider.propTypes = {
  store: PropTypes.object.isRequired,
  actions: PropTypes.object.isRequired
};