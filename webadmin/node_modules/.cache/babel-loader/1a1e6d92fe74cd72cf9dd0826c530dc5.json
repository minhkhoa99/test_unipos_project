{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Minh Khoa\\\\Desktop\\\\clone\\\\test_unipos_project\\\\webadmin\\\\src\\\\components\\\\CommonForBoth\\\\TopbarDropdown\\\\LanguageDropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Dropdown, DropdownItem, DropdownMenu, DropdownToggle } from \"reactstrap\";\nimport { get, map } from \"lodash\";\nimport { withTranslation } from \"react-i18next\"; //i18n\n\nimport i18n from \"../../../i18n\";\nimport languages from \"common/languages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LanguageDropdown = () => {\n  _s();\n\n  // Declare a new state variable, which we'll call \"menu\"\n  const [selectedLang, setSelectedLang] = useState(\"\");\n  const [menu, setMenu] = useState(false);\n  useEffect(() => {\n    const currentLanguage = localStorage.getItem(\"I18N_LANGUAGE\");\n    setSelectedLang(currentLanguage);\n  }, []);\n\n  const changeLanguageAction = lang => {\n    //set language as i18n\n    i18n.changeLanguage(lang);\n    localStorage.setItem(\"I18N_LANGUAGE\", lang);\n    setSelectedLang(lang);\n  };\n\n  const toggle = () => {\n    setMenu(!menu);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Dropdown, {\n      isOpen: menu,\n      toggle: toggle,\n      className: \"d-none d-md-block ms-2\",\n      children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n        className: \"btn header-item waves-effect\",\n        tag: \"button\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: get(languages, `${selectedLang}.flag`),\n          alt: \"Veltrix\",\n          height: \"16\",\n          className: \"me-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), \" \", get(languages, `${selectedLang}.label`), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mdi mdi-chevron-down\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n        className: \"language-switch dropdown-menu-end\",\n        children: map(Object.keys(languages), key => /*#__PURE__*/_jsxDEV(DropdownItem, {\n          onClick: () => changeLanguageAction(key),\n          className: `notify-item ${selectedLang === key ? \"active\" : \"none\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: get(languages, `${key}.flag`),\n            alt: \"Veltrix\",\n            className: \"me-2\",\n            height: \"12\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"align-middle\",\n            children: get(languages, `${key}.label`)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(LanguageDropdown, \"LIsJHhbIfo5/NGM4s2dFIt+NozI=\");\n\n_c = LanguageDropdown;\nexport default withTranslation()(LanguageDropdown);\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguageDropdown\");","map":{"version":3,"sources":["C:/Users/Minh Khoa/Desktop/clone/test_unipos_project/webadmin/src/components/CommonForBoth/TopbarDropdown/LanguageDropdown.js"],"names":["React","useEffect","useState","Dropdown","DropdownItem","DropdownMenu","DropdownToggle","get","map","withTranslation","i18n","languages","LanguageDropdown","selectedLang","setSelectedLang","menu","setMenu","currentLanguage","localStorage","getItem","changeLanguageAction","lang","changeLanguage","setItem","toggle","Object","keys","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport {\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle,\r\n} from \"reactstrap\"\r\nimport { get, map } from \"lodash\"\r\nimport { withTranslation } from \"react-i18next\"\r\n\r\n//i18n\r\nimport i18n from \"../../../i18n\"\r\nimport languages from \"common/languages\"\r\n\r\nconst LanguageDropdown = () => {\r\n  // Declare a new state variable, which we'll call \"menu\"\r\n  const [selectedLang, setSelectedLang] = useState(\"\")\r\n  const [menu, setMenu] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const currentLanguage = localStorage.getItem(\"I18N_LANGUAGE\")\r\n    setSelectedLang(currentLanguage)\r\n  }, [])\r\n\r\n  const changeLanguageAction = lang => {\r\n    //set language as i18n\r\n    i18n.changeLanguage(lang)\r\n    localStorage.setItem(\"I18N_LANGUAGE\", lang)\r\n    setSelectedLang(lang)\r\n  }\r\n\r\n  const toggle = () => {\r\n    setMenu(!menu)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Dropdown isOpen={menu} toggle={toggle} className=\"d-none d-md-block ms-2\">\r\n        <DropdownToggle className=\"btn header-item waves-effect\" tag=\"button\">\r\n          <img\r\n            src={get(languages, `${selectedLang}.flag`)}\r\n            alt=\"Veltrix\"\r\n            height=\"16\"\r\n            className=\"me-2\"\r\n          />\r\n          {\" \"}{get(languages, `${selectedLang}.label`)}\r\n          {\" \"}<span className=\"mdi mdi-chevron-down\"></span>\r\n        </DropdownToggle>\r\n        <DropdownMenu className=\"language-switch dropdown-menu-end\">\r\n          {map(Object.keys(languages), key => (\r\n            <DropdownItem\r\n              key={key}\r\n              onClick={() => changeLanguageAction(key)}\r\n              className={`notify-item ${selectedLang === key ? \"active\" : \"none\"\r\n                }`}\r\n            >\r\n              <img\r\n                src={get(languages, `${key}.flag`)}\r\n                alt=\"Veltrix\"\r\n                className=\"me-2\"\r\n                height=\"12\"\r\n              />\r\n              <span className=\"align-middle\">\r\n                {get(languages, `${key}.label`)}\r\n              </span>\r\n            </DropdownItem>\r\n          ))}\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default withTranslation()(LanguageDropdown)\r\n"]},"metadata":{},"sourceType":"module"}