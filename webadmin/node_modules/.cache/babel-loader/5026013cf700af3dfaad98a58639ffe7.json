{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"; //Account Redux states\n\nimport { REGISTER_USER } from \"./actionTypes\";\nimport { registerUserSuccessful, registerUserFailed } from \"./actions\"; //Include Both Helper File with needed methods\n\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeRegister, postJwtRegister } from \"../../../helpers/fakebackend_helper\"; // initialize relavant method of both Auth\n\nconst fireBaseBackend = getFirebaseBackend(); // Is user register successfull then direct plot user in redux.\n\nfunction* registerUser({\n  payload: {\n    user\n  }\n}) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\n      yield put(registerUserSuccessful(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtRegister, \"/post-jwt-register\", user);\n      yield put(registerUserSuccessful(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response = yield call(postFakeRegister, user);\n      yield put(registerUserSuccessful(response));\n    }\n  } catch (error) {\n    yield put(registerUserFailed(error));\n  }\n}\n\nexport function* watchUserRegister() {\n  yield takeEvery(REGISTER_USER, registerUser);\n}\n\nfunction* accountSaga() {\n  yield all([fork(watchUserRegister)]);\n}\n\nexport default accountSaga;","map":{"version":3,"sources":["C:/Users/Minh Khoa/Desktop/clone/test_unipos_project/webadmin/src/store/auth/register/saga.js"],"names":["takeEvery","fork","put","all","call","REGISTER_USER","registerUserSuccessful","registerUserFailed","getFirebaseBackend","postFakeRegister","postJwtRegister","fireBaseBackend","registerUser","payload","user","process","env","REACT_APP_DEFAULTAUTH","response","email","password","error","watchUserRegister","accountSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,SAASC,sBAAT,EAAiCC,kBAAjC,QAA2D,WAA3D,C,CAEA;;AACA,SAASC,kBAAT,QAAmC,kCAAnC;AACA,SACEC,gBADF,EAEEC,eAFF,QAGO,qCAHP,C,CAKA;;AACA,MAAMC,eAAe,GAAGH,kBAAkB,EAA1C,C,CAEA;;AACA,UAAUI,YAAV,CAAuB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAAX,CAAvB,EAA8C;AAC5C,MAAI;AACF,QAAIC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAA1C,EAAsD;AACpD,YAAMC,QAAQ,GAAG,MAAMd,IAAI,CACzBO,eAAe,CAACC,YADS,EAEzBE,IAAI,CAACK,KAFoB,EAGzBL,IAAI,CAACM,QAHoB,CAA3B;AAKA,YAAMlB,GAAG,CAACI,sBAAsB,CAACY,QAAD,CAAvB,CAAT;AACD,KAPD,MAOO,IAAIH,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,KAA1C,EAAiD;AACtD,YAAMC,QAAQ,GAAG,MAAMd,IAAI,CAACM,eAAD,EAAkB,oBAAlB,EAAwCI,IAAxC,CAA3B;AACA,YAAMZ,GAAG,CAACI,sBAAsB,CAACY,QAAD,CAAvB,CAAT;AACD,KAHM,MAGA,IAAIH,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,MAA1C,EAAkD;AACvD,YAAMC,QAAQ,GAAG,MAAMd,IAAI,CAACK,gBAAD,EAAmBK,IAAnB,CAA3B;AACA,YAAMZ,GAAG,CAACI,sBAAsB,CAACY,QAAD,CAAvB,CAAT;AACD;AACF,GAfD,CAeE,OAAOG,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACK,kBAAkB,CAACc,KAAD,CAAnB,CAAT;AACD;AACF;;AAED,OAAO,UAAUC,iBAAV,GAA8B;AACnC,QAAMtB,SAAS,CAACK,aAAD,EAAgBO,YAAhB,CAAf;AACD;;AAED,UAAUW,WAAV,GAAwB;AACtB,QAAMpB,GAAG,CAAC,CAACF,IAAI,CAACqB,iBAAD,CAAL,CAAD,CAAT;AACD;;AAED,eAAeC,WAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"\r\n\r\n//Account Redux states\r\nimport { REGISTER_USER } from \"./actionTypes\"\r\nimport { registerUserSuccessful, registerUserFailed } from \"./actions\"\r\n\r\n//Include Both Helper File with needed methods\r\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\"\r\nimport {\r\n  postFakeRegister,\r\n  postJwtRegister,\r\n} from \"../../../helpers/fakebackend_helper\"\r\n\r\n// initialize relavant method of both Auth\r\nconst fireBaseBackend = getFirebaseBackend()\r\n\r\n// Is user register successfull then direct plot user in redux.\r\nfunction* registerUser({ payload: { user } }) {\r\n  try {\r\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n      const response = yield call(\r\n        fireBaseBackend.registerUser,\r\n        user.email,\r\n        user.password\r\n      )\r\n      yield put(registerUserSuccessful(response))\r\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\r\n      const response = yield call(postJwtRegister, \"/post-jwt-register\", user)\r\n      yield put(registerUserSuccessful(response))\r\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\r\n      const response = yield call(postFakeRegister, user)\r\n      yield put(registerUserSuccessful(response))\r\n    }\r\n  } catch (error) {\r\n    yield put(registerUserFailed(error))\r\n  }\r\n}\r\n\r\nexport function* watchUserRegister() {\r\n  yield takeEvery(REGISTER_USER, registerUser)\r\n}\r\n\r\nfunction* accountSaga() {\r\n  yield all([fork(watchUserRegister)])\r\n}\r\n\r\nexport default accountSaga\r\n"]},"metadata":{},"sourceType":"module"}