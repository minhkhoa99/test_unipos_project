{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"; // Login Redux States\n\nimport { FORGET_PASSWORD } from \"./actionTypes\";\nimport { userForgetPasswordSuccess, userForgetPasswordError } from \"./actions\"; //Include Both Helper File with needed methods\n\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeForgetPwd, postJwtForgetPwd } from \"../../../helpers/fakebackend_helper\";\nconst fireBaseBackend = getFirebaseBackend(); //If user is send successfully send mail link then dispatch redux action's are directly from here.\n\nfunction* forgetUser({\n  payload: {\n    user,\n    history\n  }\n}) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.forgetPassword, user.email);\n\n      if (response) {\n        yield put(userForgetPasswordSuccess(\"Reset link are sended to your mailbox, check there first\"));\n      }\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtForgetPwd, \"/jwt-forget-pwd\", {\n        email: user.email\n      });\n\n      if (response) {\n        yield put(userForgetPasswordSuccess(\"Reset link are sended to your mailbox, check there first\"));\n      }\n    } else {\n      const response = yield call(postFakeForgetPwd, \"/fake-forget-pwd\", {\n        email: user.email\n      });\n\n      if (response) {\n        yield put(userForgetPasswordSuccess(\"Reset link are sended to your mailbox, check there first\"));\n      }\n    }\n  } catch (error) {\n    yield put(userForgetPasswordError(error));\n  }\n}\n\nexport function* watchUserPasswordForget() {\n  yield takeEvery(FORGET_PASSWORD, forgetUser);\n}\n\nfunction* forgetPasswordSaga() {\n  yield all([fork(watchUserPasswordForget)]);\n}\n\nexport default forgetPasswordSaga;","map":{"version":3,"sources":["C:/Users/Minh Khoa/Desktop/clone/test_unipos_project/webadmin/src/store/auth/forgetpwd/saga.js"],"names":["takeEvery","fork","put","all","call","FORGET_PASSWORD","userForgetPasswordSuccess","userForgetPasswordError","getFirebaseBackend","postFakeForgetPwd","postJwtForgetPwd","fireBaseBackend","forgetUser","payload","user","history","process","env","REACT_APP_DEFAULTAUTH","response","forgetPassword","email","error","watchUserPasswordForget","forgetPasswordSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,yBAAT,EAAoCC,uBAApC,QAAmE,WAAnE,C,CAEA;;AACA,SAASC,kBAAT,QAAmC,kCAAnC;AACA,SACEC,iBADF,EAEEC,gBAFF,QAGO,qCAHP;AAKA,MAAMC,eAAe,GAAGH,kBAAkB,EAA1C,C,CAEA;;AACA,UAAUI,UAAV,CAAqB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR;AAAX,CAArB,EAAqD;AACnD,MAAI;AACF,QAAIC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAA1C,EAAsD;AACpD,YAAMC,QAAQ,GAAG,MAAMf,IAAI,CAACO,eAAe,CAACS,cAAjB,EAAiCN,IAAI,CAACO,KAAtC,CAA3B;;AACA,UAAIF,QAAJ,EAAc;AACZ,cAAMjB,GAAG,CACPI,yBAAyB,CACvB,0DADuB,CADlB,CAAT;AAKD;AACF,KATD,MASO,IAAIU,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,KAA1C,EAAiD;AACtD,YAAMC,QAAQ,GAAG,MAAMf,IAAI,CAACM,gBAAD,EAAmB,iBAAnB,EAAsC;AAC/DW,QAAAA,KAAK,EAAEP,IAAI,CAACO;AADmD,OAAtC,CAA3B;;AAGA,UAAIF,QAAJ,EAAc;AACZ,cAAMjB,GAAG,CACPI,yBAAyB,CACvB,0DADuB,CADlB,CAAT;AAKD;AACF,KAXM,MAWA;AACL,YAAMa,QAAQ,GAAG,MAAMf,IAAI,CAACK,iBAAD,EAAoB,kBAApB,EAAwC;AACjEY,QAAAA,KAAK,EAAEP,IAAI,CAACO;AADqD,OAAxC,CAA3B;;AAGA,UAAIF,QAAJ,EAAc;AACZ,cAAMjB,GAAG,CACPI,yBAAyB,CACvB,0DADuB,CADlB,CAAT;AAKD;AACF;AACF,GAjCD,CAiCE,OAAOgB,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACK,uBAAuB,CAACe,KAAD,CAAxB,CAAT;AACD;AACF;;AAED,OAAO,UAAUC,uBAAV,GAAoC;AACzC,QAAMvB,SAAS,CAACK,eAAD,EAAkBO,UAAlB,CAAf;AACD;;AAED,UAAUY,kBAAV,GAA+B;AAC7B,QAAMrB,GAAG,CAAC,CAACF,IAAI,CAACsB,uBAAD,CAAL,CAAD,CAAT;AACD;;AAED,eAAeC,kBAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"\r\n\r\n// Login Redux States\r\nimport { FORGET_PASSWORD } from \"./actionTypes\"\r\nimport { userForgetPasswordSuccess, userForgetPasswordError } from \"./actions\"\r\n\r\n//Include Both Helper File with needed methods\r\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\"\r\nimport {\r\n  postFakeForgetPwd,\r\n  postJwtForgetPwd,\r\n} from \"../../../helpers/fakebackend_helper\"\r\n\r\nconst fireBaseBackend = getFirebaseBackend()\r\n\r\n//If user is send successfully send mail link then dispatch redux action's are directly from here.\r\nfunction* forgetUser({ payload: { user, history } }) {\r\n  try {\r\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n      const response = yield call(fireBaseBackend.forgetPassword, user.email)\r\n      if (response) {\r\n        yield put(\r\n          userForgetPasswordSuccess(\r\n            \"Reset link are sended to your mailbox, check there first\"\r\n          )\r\n        )\r\n      }\r\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\r\n      const response = yield call(postJwtForgetPwd, \"/jwt-forget-pwd\", {\r\n        email: user.email,\r\n      })\r\n      if (response) {\r\n        yield put(\r\n          userForgetPasswordSuccess(\r\n            \"Reset link are sended to your mailbox, check there first\"\r\n          )\r\n        )\r\n      }\r\n    } else {\r\n      const response = yield call(postFakeForgetPwd, \"/fake-forget-pwd\", {\r\n        email: user.email,\r\n      })\r\n      if (response) {\r\n        yield put(\r\n          userForgetPasswordSuccess(\r\n            \"Reset link are sended to your mailbox, check there first\"\r\n          )\r\n        )\r\n      }\r\n    }\r\n  } catch (error) {\r\n    yield put(userForgetPasswordError(error))\r\n  }\r\n}\r\n\r\nexport function* watchUserPasswordForget() {\r\n  yield takeEvery(FORGET_PASSWORD, forgetUser)\r\n}\r\n\r\nfunction* forgetPasswordSaga() {\r\n  yield all([fork(watchUserPasswordForget)])\r\n}\r\n\r\nexport default forgetPasswordSaga\r\n"]},"metadata":{},"sourceType":"module"}