{"ast":null,"code":"import React, { useRef, useEffect } from 'react';\n\nvar AuthCode = function AuthCode(_ref) {\n  var _ref$characters = _ref.characters,\n      characters = _ref$characters === void 0 ? 6 : _ref$characters,\n      _ref$allowedCharacter = _ref.allowedCharacters,\n      allowedCharacters = _ref$allowedCharacter === void 0 ? '^[A-Za-z0-9]*$' : _ref$allowedCharacter,\n      onChange = _ref.onChange,\n      password = _ref.password,\n      inputStyle = _ref.inputStyle,\n      containerStyle = _ref.containerStyle,\n      inputClassName = _ref.inputClassName,\n      containerClassName = _ref.containerClassName;\n  var inputsRef = useRef([]);\n  useEffect(function () {\n    inputsRef.current[0].focus();\n  }, []);\n\n  var sendResult = function sendResult() {\n    var res = inputsRef.current.map(function (input) {\n      return input.value;\n    }).join('');\n    onChange(res);\n  };\n\n  var handleOnChange = function handleOnChange(e) {\n    if (e.target.value.match(allowedCharacters)) {\n      if (e.target.nextElementSibling !== null) {\n        e.target.nextElementSibling.focus();\n      }\n    } else {\n      e.target.value = '';\n    }\n\n    sendResult();\n  };\n\n  var handleOnKeyDown = function handleOnKeyDown(e) {\n    var key = e.key;\n    var target = e.target;\n\n    if (key === 'Backspace') {\n      if (target.value === '' && target.previousElementSibling !== null) {\n        if (target.previousElementSibling !== null) {\n          target.previousElementSibling.focus();\n          e.preventDefault();\n        }\n      } else {\n        target.value = '';\n      }\n\n      sendResult();\n    }\n  };\n\n  var handleOnFocus = function handleOnFocus(e) {\n    e.target.select();\n  };\n\n  var handleOnPaste = function handleOnPaste(e) {\n    var value = e.clipboardData.getData('Text');\n\n    if (value.match(allowedCharacters)) {\n      for (var i = 0; i < characters && i < value.length; i++) {\n        inputsRef.current[i].value = value.charAt(i);\n\n        if (inputsRef.current[i].nextElementSibling !== null) {\n          inputsRef.current[i].nextElementSibling.focus();\n        }\n      }\n\n      sendResult();\n    }\n\n    e.preventDefault();\n  };\n\n  var inputs = [];\n\n  var _loop = function _loop(i) {\n    inputs.push(React.createElement(\"input\", {\n      key: i,\n      onChange: handleOnChange,\n      onKeyDown: handleOnKeyDown,\n      onFocus: handleOnFocus,\n      onPaste: handleOnPaste,\n      type: password ? 'password' : 'text',\n      ref: function ref(el) {\n        return inputsRef.current[i] = el;\n      },\n      maxLength: 1,\n      className: inputClassName,\n      style: inputStyle\n    }));\n  };\n\n  for (var i = 0; i < characters; i++) {\n    _loop(i);\n  }\n\n  return React.createElement(\"div\", {\n    className: containerClassName,\n    style: containerStyle\n  }, inputs);\n};\n\nexport default AuthCode;","map":{"version":3,"sources":["../src/index.tsx"],"names":["AuthCode","characters","allowedCharacters","onChange","password","inputStyle","containerStyle","inputClassName","containerClassName","inputsRef","useRef","useEffect","sendResult","res","input","handleOnChange","e","handleOnKeyDown","key","target","handleOnFocus","handleOnPaste","value","i","inputs","onKeyDown","onFocus","onPaste","type","ref","maxLength","className","style"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\ntype Props = {\n  characters?: number;\n  allowedCharacters?: RegExp;\n  onChange: (res: string) => void;\n  password?: boolean;\n  /**\n   * @deprecated Since version 1.2.0 Will be deleted in version 2.0. Use inputClassName instead.\n   */\n  inputStyle?: React.CSSProperties;\n  /**\n   * @deprecated Since version 1.2.0 Will be deleted in version 2.0. Use containerClassName instead.\n   */\n  containerStyle?: React.CSSProperties;\n  inputClassName?: string;\n  containerClassName?: string;\n};\n\nconst AuthCode: React.FC<Props> = ({\n  characters = 6,\n  allowedCharacters = '^[A-Za-z0-9]*$',\n  onChange,\n  password,\n  inputStyle,\n  containerStyle,\n  inputClassName,\n  containerClassName\n}) => {\n  const inputsRef = useRef<Array<HTMLInputElement>>([]);\n\n  useEffect(() => {\n    inputsRef.current[0].focus();\n  }, []);\n\n  const sendResult = () => {\n    const res = inputsRef.current.map((input) => input.value).join('');\n    onChange(res);\n  };\n\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value.match(allowedCharacters)) {\n      if (e.target.nextElementSibling !== null) {\n        (e.target.nextElementSibling as HTMLInputElement).focus();\n      }\n    } else {\n      e.target.value = '';\n    }\n    sendResult();\n  };\n\n  const handleOnKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    const { key } = e;\n    const target = e.target as HTMLInputElement;\n    if (key === 'Backspace') {\n      if (target.value === '' && target.previousElementSibling !== null) {\n        if (target.previousElementSibling !== null) {\n          (target.previousElementSibling as HTMLInputElement).focus();\n          e.preventDefault();\n        }\n      } else {\n        target.value = '';\n      }\n      sendResult();\n    }\n  };\n\n  const handleOnFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.target.select();\n  };\n\n  const handleOnPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n    const value = e.clipboardData.getData('Text');\n    if (value.match(allowedCharacters)) {\n      for (let i = 0; i < characters && i < value.length; i++) {\n        inputsRef.current[i].value = value.charAt(i);\n        if (inputsRef.current[i].nextElementSibling !== null) {\n          (inputsRef.current[i].nextElementSibling as HTMLInputElement).focus();\n        }\n      }\n      sendResult();\n    }\n    e.preventDefault();\n  };\n\n  const inputs = [];\n  for (let i = 0; i < characters; i++) {\n    inputs.push(\n      <input\n        key={i}\n        onChange={handleOnChange}\n        onKeyDown={handleOnKeyDown}\n        onFocus={handleOnFocus}\n        onPaste={handleOnPaste}\n        type={password ? 'password' : 'text'}\n        ref={(el: HTMLInputElement) => (inputsRef.current[i] = el)}\n        maxLength={1}\n        className={inputClassName}\n        style={inputStyle}\n      />\n    );\n  }\n\n  return (\n    <div className={containerClassName} style={containerStyle}>\n      {inputs}\n    </div>\n  );\n};\n\nexport default AuthCode;\n"]},"metadata":{},"sourceType":"module"}