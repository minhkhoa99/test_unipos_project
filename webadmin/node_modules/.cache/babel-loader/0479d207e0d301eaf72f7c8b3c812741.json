{"ast":null,"code":"import axios from \"axios\";\nimport { post, del, get, put } from \"./api_helper\";\nimport * as url from \"./url_helper\"; // Gets the logged in user data from local session\n\nconst getLoggedInUser = () => {\n  const user = localStorage.getItem(\"user\");\n  if (user) return JSON.parse(user);\n  return null;\n}; //is user is logged in\n\n\nconst isUserAuthenticated = () => {\n  return getLoggedInUser() !== null;\n}; // Register Method\n\n\nconst postFakeRegister = data => post(url.POST_FAKE_REGISTER, data); // Login Method\n\n\nconst postFakeLogin = data => post(url.POST_FAKE_LOGIN, data); // postForgetPwd\n\n\nconst postFakeForgetPwd = data => post(url.POST_FAKE_PASSWORD_FORGET, data); // Edit profile\n\n\nconst postJwtProfile = data => post(url.POST_EDIT_JWT_PROFILE, data);\n\nconst postFakeProfile = data => post(url.POST_EDIT_PROFILE, data); // Register Method\n\n\nconst postJwtRegister = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status >= 200 || response.status <= 299) return response.data;\n    throw response.data;\n  }).catch(err => {\n    let message;\n\n    if (err.response && err.response.status) {\n      switch (err.response.status) {\n        case 404:\n          message = \"Sorry! the page you are looking for could not be found\";\n          break;\n\n        case 500:\n          message = \"Sorry! something went wrong, please contact our support team\";\n          break;\n\n        case 401:\n          message = \"Invalid credentials\";\n          break;\n\n        default:\n          message = err[1];\n          break;\n      }\n    }\n\n    throw message;\n  });\n}; // Login Method\n\n\nconst postJwtLogin = data => post(url.POST_FAKE_JWT_LOGIN, data); // postForgetPwd\n\n\nconst postJwtForgetPwd = data => post(url.POST_FAKE_JWT_PASSWORD_FORGET, data); // get Events\n\n\nexport const getEvents = () => get(url.GET_EVENTS); // add Events\n\nexport const addNewEvent = event => post(url.ADD_NEW_EVENT, event); // update Event\n\nexport const updateEvent = event => put(url.UPDATE_EVENT, event); // delete Event\n\nexport const deleteEvent = event => del(url.DELETE_EVENT, {\n  headers: {\n    event\n  }\n}); // get Categories\n\nexport const getCategories = () => get(url.GET_CATEGORIES);\nexport { getLoggedInUser, isUserAuthenticated, postFakeRegister, postFakeLogin, postFakeProfile, postFakeForgetPwd, postJwtRegister, postJwtLogin, postJwtForgetPwd, postJwtProfile };","map":{"version":3,"sources":["C:/Users/Minh Khoa/Desktop/clone/test_unipos_project/webadmin/src/helpers/fakebackend_helper.js"],"names":["axios","post","del","get","put","url","getLoggedInUser","user","localStorage","getItem","JSON","parse","isUserAuthenticated","postFakeRegister","data","POST_FAKE_REGISTER","postFakeLogin","POST_FAKE_LOGIN","postFakeForgetPwd","POST_FAKE_PASSWORD_FORGET","postJwtProfile","POST_EDIT_JWT_PROFILE","postFakeProfile","POST_EDIT_PROFILE","postJwtRegister","then","response","status","catch","err","message","postJwtLogin","POST_FAKE_JWT_LOGIN","postJwtForgetPwd","POST_FAKE_JWT_PASSWORD_FORGET","getEvents","GET_EVENTS","addNewEvent","event","ADD_NEW_EVENT","updateEvent","UPDATE_EVENT","deleteEvent","DELETE_EVENT","headers","getCategories","GET_CATEGORIES"],"mappings":"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","sourcesContent":["import axios from \"axios\"\r\nimport { post, del, get, put } from \"./api_helper\"\r\nimport * as url from \"./url_helper\"\r\n\r\n// Gets the logged in user data from local session\r\nconst getLoggedInUser = () => {\r\n  const user = localStorage.getItem(\"user\")\r\n  if (user) return JSON.parse(user)\r\n  return null\r\n}\r\n\r\n//is user is logged in\r\nconst isUserAuthenticated = () => {\r\n  return getLoggedInUser() !== null\r\n}\r\n\r\n// Register Method\r\nconst postFakeRegister = (data) => post(url.POST_FAKE_REGISTER, data)\r\n\r\n// Login Method\r\nconst postFakeLogin = data => post(url.POST_FAKE_LOGIN, data)\r\n\r\n// postForgetPwd\r\nconst postFakeForgetPwd = data => post(url.POST_FAKE_PASSWORD_FORGET, data)\r\n\r\n// Edit profile\r\nconst postJwtProfile = data => post(url.POST_EDIT_JWT_PROFILE, data)\r\n\r\nconst postFakeProfile = data => post(url.POST_EDIT_PROFILE, data)\r\n\r\n// Register Method\r\nconst postJwtRegister = (url, data) => {\r\n  return axios\r\n    .post(url, data)\r\n    .then(response => {\r\n      if (response.status >= 200 || response.status <= 299) return response.data\r\n      throw response.data\r\n    })\r\n    .catch(err => {\r\n      let message\r\n      if (err.response && err.response.status) {\r\n        switch (err.response.status) {\r\n          case 404:\r\n            message = \"Sorry! the page you are looking for could not be found\"\r\n            break\r\n          case 500:\r\n            message =\r\n              \"Sorry! something went wrong, please contact our support team\"\r\n            break\r\n          case 401:\r\n            message = \"Invalid credentials\"\r\n            break\r\n          default:\r\n            message = err[1]\r\n            break\r\n        }\r\n      }\r\n      throw message\r\n    })\r\n}\r\n\r\n// Login Method\r\nconst postJwtLogin = data => post(url.POST_FAKE_JWT_LOGIN, data)\r\n\r\n// postForgetPwd\r\nconst postJwtForgetPwd = data => post(url.POST_FAKE_JWT_PASSWORD_FORGET, data)\r\n\r\n// get Events\r\nexport const getEvents = () => get(url.GET_EVENTS)\r\n\r\n// add Events\r\nexport const addNewEvent = event => post(url.ADD_NEW_EVENT, event)\r\n\r\n// update Event\r\nexport const updateEvent = event => put(url.UPDATE_EVENT, event)\r\n\r\n// delete Event\r\nexport const deleteEvent = event =>\r\n  del(url.DELETE_EVENT, { headers: { event } })\r\n\r\n// get Categories\r\nexport const getCategories = () => get(url.GET_CATEGORIES)\r\n\r\nexport {\r\n  getLoggedInUser,\r\n  isUserAuthenticated,\r\n  postFakeRegister,\r\n  postFakeLogin,\r\n  postFakeProfile,\r\n  postFakeForgetPwd,\r\n  postJwtRegister,\r\n  postJwtLogin,\r\n  postJwtForgetPwd,\r\n  postJwtProfile,\r\n}\r\n"]},"metadata":{},"sourceType":"module"}